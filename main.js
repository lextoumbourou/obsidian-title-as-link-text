/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BetterMarkdownLinksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var BetterMarkdownLinksPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerEvent(
      this.app.vault.on("rename", async (file, oldPath) => {
        this.updateBackLinks(file, oldPath);
      })
    );
    this.registerEvent(
      this.app.metadataCache.on("changed", async (file) => {
        this.updateBackLinks(file, file.path);
      })
    );
  }
  async updateBackLinks(file, oldPath) {
    if (!oldPath || !file.path.toLocaleLowerCase().endsWith(".md") || !(file instanceof import_obsidian.TFile)) {
      return;
    }
    const cachedFile = this.app.metadataCache.getFileCache(file);
    if (!cachedFile) {
      return;
    }
    const title = this.getPageTitle(cachedFile);
    const notes = this.getCachedNotesThatHaveLinkToFile(oldPath);
    let updatedBacklinksCount = 0;
    for (let note of notes) {
      const fileContent = await this.app.vault.read(note);
      const newFileContent = fileContent.replace(
        /\[(.*?)\]\((.*?)\)/g,
        (_, linkText, linkUrl) => {
          linkUrl = decodeURIComponent(linkUrl);
          if (linkUrl === oldPath) {
            return `[${title}](${encodeURIComponent(file.path)})`;
          }
          return `[${linkText}](${linkUrl})`;
        }
      );
      if (fileContent !== newFileContent) {
        await this.app.vault.modify(note, newFileContent);
        updatedBacklinksCount++;
      }
    }
    if (updatedBacklinksCount > 0) {
      new import_obsidian.Notice(`${updatedBacklinksCount} backlink(s) updated.`);
    }
    ;
  }
  getCachedNotesThatHaveLinkToFile(filePath) {
    var _a, _b;
    let notes = [];
    let allNotes = this.app.vault.getMarkdownFiles();
    if (allNotes) {
      for (let note of allNotes) {
        let notePath = note.path;
        if (note.path == filePath)
          continue;
        let embeds = (_a = this.app.metadataCache.getCache(notePath)) == null ? void 0 : _a.embeds;
        if (embeds) {
          for (let link_data of embeds) {
            if (link_data.link == filePath) {
              notes.push(note);
            }
          }
        }
        let links = (_b = this.app.metadataCache.getCache(notePath)) == null ? void 0 : _b.links;
        if (links) {
          for (let link_data of links) {
            if (link_data.link == filePath) {
              notes.push(note);
            }
          }
        }
      }
    }
    return notes;
  }
  getPageTitle(cache) {
    const frontMatterTitle = cache.frontmatter && cache.frontmatter.title;
    const firstHeading = cache.headings && cache.headings[0].heading;
    return frontMatterTitle || firstHeading || "";
  }
};
